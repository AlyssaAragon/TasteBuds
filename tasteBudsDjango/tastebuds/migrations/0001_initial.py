# Generated by Django 5.1.6 on 2025-03-02 01:27

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Diet',
            fields=[
                ('dietid', models.AutoField(db_column='dietid', primary_key=True, serialize=False)),
                ('dietname', models.CharField(db_column='dietname', default='General', max_length=255, unique=True)),
            ],
            options={
                'db_table': 'diet',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('recipeid', models.AutoField(db_column='recipeid', primary_key=True, serialize=False)),
                ('title', models.CharField(db_column='title', default='Untitled Recipe', max_length=255)),
                ('ingredients', models.TextField(db_column='ingredients', default='No ingredients listed')),
                ('instructions', models.TextField(db_column='instructions', default='No instructions provided')),
                ('image_name', models.CharField(blank=True, db_column='image_name', max_length=255, null=True)),
                ('cleaned_ingredients', models.TextField(db_column='cleaned_ingredients', default='')),
            ],
            options={
                'db_table': 'recipe',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RecipeDiet',
            fields=[
                ('recipedietid', models.AutoField(db_column='recipedietid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'recipe_diet',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SavedRecipe',
            fields=[
                ('savedid', models.AutoField(db_column='savedid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'saved_recipe',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserDiet',
            fields=[
                ('userdietid', models.AutoField(db_column='userdietid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'user_diet',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('userid', models.AutoField(db_column='userid', primary_key=True, serialize=False)),
                ('partnerid', models.IntegerField(blank=True, db_column='partnerid', null=True)),
                ('username', models.CharField(db_column='username', default='defaultuser', max_length=150, unique=True)),
                ('email', models.EmailField(db_column='email', default='user@example.com', max_length=254, unique=True)),
                ('firstlastname', models.CharField(db_column='firstlastname', default='First Last', max_length=255)),
                ('password', models.TextField(db_column='password', default='')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'managed': True,
            },
        ),
    ]
